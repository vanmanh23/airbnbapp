declare const patterns: {
    readonly route: readonly [RegExp, ""];
    readonly splat: readonly [RegExp, "*"];
    readonly param: readonly [RegExp, ":$1"];
    readonly slash: readonly [RegExp, "/"];
    readonly optional: readonly [RegExp, "$1?"];
};
type PreservedKey = '_app' | '404';
type BaseRoute = {
    id?: string;
    path?: string;
    children?: BaseRoute[];
} & Record<string, any>;
declare const generatePreservedRoutes: <T>(files: Record<string, any>) => Partial<Record<PreservedKey, T>>;
declare const generateRegularRoutes: <T extends BaseRoute, M>(files: Record<string, any>, buildRoute: (module: M, key: string) => T) => T[];
declare const generateModalRoutes: <T>(files: Record<string, any>) => Record<string, T>;

export { generateModalRoutes, generatePreservedRoutes, generateRegularRoutes, patterns };
