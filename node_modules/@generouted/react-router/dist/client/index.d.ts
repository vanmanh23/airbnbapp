import * as react_jsx_runtime from 'react/jsx-runtime';
import { LinkProps, NavigateOptions } from 'react-router-dom';

declare const components: <Path extends string, Params extends Record<string, any>>() => {
    Link: <P extends Path | {
        pathname: Path;
        search?: string | undefined;
        hash?: string | undefined;
    }>({ to, params, ...props }: LinkProps & (P extends keyof Params ? {
        to: P;
        params: Params[P];
    } : P extends {
        pathname: Path;
        search?: string | undefined;
        hash?: string | undefined;
    } ? P["pathname"] extends keyof Params ? {
        to: P;
        params: Params[P["pathname"]];
    } : {
        to: P;
        params?: undefined;
    } : {
        to: P;
        params?: undefined;
    })) => react_jsx_runtime.JSX.Element;
    Navigate: <P_1 extends Path | {
        pathname: Path;
        search?: string | undefined;
        hash?: string | undefined;
    }>({ to, params, ...props }: LinkProps & (P_1 extends keyof Params ? {
        to: P_1;
        params: Params[P_1];
    } : P_1 extends {
        pathname: Path;
        search?: string | undefined;
        hash?: string | undefined;
    } ? P_1["pathname"] extends keyof Params ? {
        to: P_1;
        params: Params[P_1["pathname"]];
    } : {
        to: P_1;
        params?: undefined;
    } : {
        to: P_1;
        params?: undefined;
    })) => react_jsx_runtime.JSX.Element;
};

declare const hooks: <Path extends string, Params extends Record<string, any>, ModalPath extends string>() => {
    useParams: <P extends keyof Params>(path: P) => Params[P];
    useNavigate: () => <P_1 extends number | Path | {
        pathname: Path;
        search?: string | undefined;
        hash?: string | undefined;
    }>(to: P_1, ...[options]: P_1 extends number ? [] : P_1 extends keyof Params ? [NavigateOptions & {
        params: Params[P_1];
    }] : P_1 extends {
        pathname: Path;
        search?: string | undefined;
        hash?: string | undefined;
    } ? P_1["pathname"] extends keyof Params ? [NavigateOptions & {
        params: Params[P_1["pathname"]];
    }] : [NavigateOptions & {
        params?: undefined;
    }] : [] | [NavigateOptions & {
        params?: undefined;
    }]) => void;
    useModals: () => {
        current: any;
        open: <P_2 extends Path>(path: ModalPath, options?: (NavigateOptions & (P_2 extends keyof Params ? {
            at?: P_2 | undefined;
            params: Params[P_2];
        } : {
            at?: P_2 | undefined;
            params?: undefined;
        })) | undefined) => void;
        close: <P_3 extends Path>(options?: (NavigateOptions & (P_3 extends keyof Params ? {
            at?: P_3 | undefined;
            params: Params[P_3];
        } : {
            at?: P_3 | undefined;
            params?: undefined;
        })) | undefined) => void;
    };
};

declare const utils: <Path extends string, Params extends Record<string, any>>() => {
    redirect: <P extends Path>(url: P, ...[options]: P extends keyof Params ? [(number | ResponseInit) & {
        params: Params[P];
    }] : [] | [(number | ResponseInit) & {
        params?: undefined;
    }]) => Response;
};

export { components, hooks, utils };
